{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7503d809",
      "metadata": {
        "id": "7503d809"
      },
      "outputs": [],
      "source": [
        "#ZEZE OTHNIEL AIME\n",
        "# APPLICATION DE RECOMMANDATION DE FILM\n",
        "\n",
        "# Importation des librairies\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import re\n",
        "import nltk\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "nltk.download('stopwords')\n",
        "nltk.download('punkt')\n",
        "from nltk import word_tokenize\n",
        "from nltk.corpus import stopwords\n",
        "import pickle\n",
        "import pandas as pd\n",
        "import streamlit as st\n",
        "import webbrowser\n",
        "from streamlit import session_state as session\n",
        "from streamlit import components\n",
        "from flask import Flask, request, jsonify\n",
        "from flask_restful import Api, Resource\n",
        "\n",
        "app = Flask(__name__)\n",
        "api = Api(app)\n",
        "\n",
        "#Importation des bases de données\n",
        "movies_df= pd.read_csv('movies.csv')\n",
        "ratings_df= pd.read_csv('ratings.csv')\n",
        "\n",
        "# Copie du dataframedans un nouveau dataframe\n",
        "moviesWithGenres_df= movies_df.copy()\n",
        "\n",
        "# Pour chaque ligne du dataframe, parcourir la liste de genres et placer 1 à la colonne correspondante du nouveau dataframe\n",
        "for index, row in movies_df.iterrows():\n",
        "    for genre in row['genres']:\n",
        "        moviesWithGenres_df.at[index, genre] = 1\n",
        "\n",
        "# Remplacer les valeurs NaNpar des 0 pour indiquer qu'un film n'est pas de ce genre\n",
        "moviesWithGenres_df= moviesWithGenres_df.fillna(0)\n",
        "moviesWithGenres_df.head()\n",
        "\n",
        "# Supprimer une colonne ou une ligne spécifique d'un dataframe\n",
        "ratings_df= ratings_df.drop('timestamp',1)\n",
        "\n",
        "#Definir la fonction de recommandation (basé sur le contenu)\n",
        "def Movies_Recommandations(userInput, ratings_df, moviesWithGenres_df, n_recommandations=10):\n",
        "\n",
        "    #Extraction des films notés par l'utilisateur et leurs notes\n",
        "    userInput = [\n",
        "        {\"movieId\": title, \"rating\": rating}\n",
        "        for title, rating in zip(ratings_df[\"movieId\"], ratings_df[\"rating\"])\n",
        "    ]\n",
        "\n",
        "    #Les notes attribuées par l'utilisateur\n",
        "    inputMovies= pd.DataFrame(userInput)\n",
        "\n",
        "    #Filtrer les films sur la base des titres\n",
        "    inputId= movies_df[movies_df['title'].isin(inputMovies['title'].tolist())]\n",
        "\n",
        "    #Fusionner de façon implicite sur la base des titre, pour avoir notre dataframe\n",
        "    inputMovies= pd.merge(inputId, inputMovies)\n",
        "\n",
        "    # Supprimer les colonnes dont nous n'avons pas besoin dans notre dataframepour libérer de la mémoire\n",
        "    inputMovies= inputMovies.drop('genres', 1).drop('year', 1)\n",
        "\n",
        "    # Filtrer les films\n",
        "    userMovies= moviesWithGenres_df[moviesWithGenres_df['movieId'].isin(inputMovies['movieId'].tolist())]\n",
        "\n",
        "    # Réinitialisation de l'index\n",
        "    userMovies= userMovies.reset_index(drop=True)\n",
        "\n",
        "    # Supprimer les colonnes non nécessaires\n",
        "    userGenreTable= userMovies.drop('movieId', 1).drop('title', 1).drop('genres', 1).drop('year', 1)\n",
        "\n",
        "    # Produit matriciel pour obtenir les poids\n",
        "    userProfile= userGenreTable.transpose().dot(inputMovies['rating'])\n",
        "\n",
        "    # Récupérons les genres de chaque film de notre dataframed'origine\n",
        "    genreTable= moviesWithGenres_df.set_index(moviesWithGenres_df['movieId'])\n",
        "\n",
        "    # Et supprimons less colonnes non nécessaires\n",
        "    genreTable= genreTable.drop('movieId', 1).drop('title', 1).drop('genres', 1).drop('year', 1)\n",
        "\n",
        "    # Multiplier les genres par les poids et calculer la moyenne pondérée\n",
        "    recommendationTable_df= ((genreTable*userProfile).sum(axis=1))/(userProfile.sum())\n",
        "\n",
        "    # Ordonner les recommandations par ordre décroissant\n",
        "    recommendationTable_df= recommendationTable_df.sort_values(ascending=False)\n",
        "\n",
        "    # Le résultatfinal // On va chercher des films\n",
        "    recommanded_movies = movies_df.loc[movies_df['movieId'].isin(recommendationTable_df.head(20).keys())]\n",
        "    return recommanded_movies[:n_recommandations]\n",
        "\n",
        "\n",
        "# Définir La fonction de l'Application\n",
        "def MoviesRecommandationsApp():\n",
        "    #Attribuer un nom à la page\n",
        "    st.set_page_config(page_title='Theater Home Movies', page_icon='(^_^)')\n",
        "\n",
        "    #Définir des polices d'écritures pour les titre et sous-titre\n",
        "    st.markdown(\n",
        "        \"\"\"\n",
        "        <style>\n",
        "        h1 {\n",
        "            Font_family: \"Arial\", sans-serif;\n",
        "            color: #00008B;\n",
        "        }\n",
        "\n",
        "        h2 {\n",
        "            Font_family: \"Courier New\", monospace;\n",
        "            color: #808080;\n",
        "        }\n",
        "        </style>\n",
        "        \"\"\",\n",
        "        unsafe_allow_html=True\n",
        "    )\n",
        "\n",
        "    #Bouton de changement de thème (à titre décoratif)\n",
        "    Bouton mode Jour/Nuit\n",
        "    with st.sidebar:\n",
        "        if st.button(\"Mode Nuit / Jour\"):\n",
        "            if st.get_option('theme') == 'light':\n",
        "                st.get_theme('dark')\n",
        "            else:\n",
        "               st.set_theme('light')\n",
        "\n",
        "    #Titre et sous-titre de l'application\n",
        "    st.sidebar.markdown('# Theater Home Movies')\n",
        "    st.sidebar.subheader('Welcome on our App')\n",
        "\n",
        "    #importer des images\n",
        "    st.sidebar.image('https://www.nextplz.fr/wp-content/uploads/nextplz/2022/01/fast-and-furious-10-1200x675.jpg', use_column_width=True)\n",
        "    st.sidebar.image('https://lumiere-a.akamaihd.net/v1/images/movie_poster_zootopia_866a1bf2.jpeg?region=0%2C0%2C300%2C450', use_column_width=True)\n",
        "    st.sidebar.image('https://img.phonandroid.com/2021/04/avengers-infinity-war.jpg', use_column_width=True)\n",
        "\n",
        "    #Message pour utilisateur\n",
        "    st.subheader('Veuillez attribuer des notes aux films: ')\n",
        "    userInput = []\n",
        "    for i in range(5):\n",
        "        title = st.text_input(f\"Titre du film {i+1}\")\n",
        "        rating = st.select_slider(f\"Note du film {i+1}\", options=[0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0])\n",
        "        if title and rating:\n",
        "            userInput.append({\"titre\": title, \"Note\": rating})\n",
        "\n",
        "    #Appliquer la fonction de recommandation\n",
        "    if st.button(\"Recommandations\"):\n",
        "        if userInput:\n",
        "            recommanded_movies = Movies_Recommandations(userInput, ratings_df, moviesWithGenres_df, n_recommandations=10)\n",
        "            st.subheader(\"Les Films recommandés\")\n",
        "            st.dataframe(recommanded_movies[['title', 'genres']])\n",
        "        else:\n",
        "            st.warning(\"Entrez invalide. Veuillez Vérifier vos entrées précédentes\")\n",
        "\n",
        "    #Adresse e-mail\n",
        "    col1, col2 = st.columns([5, 1])\n",
        "    with col2:\n",
        "        if st.button(\"Pour plus d'info, Envoyer-nous un e-mail\"):\n",
        "            mailto_link = \"mailto:aimezez02@gmail.com\"\n",
        "            webbrowser.open_new(mailto_link)\n",
        "\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    MoviesRecommandationsApp()"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.13"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
